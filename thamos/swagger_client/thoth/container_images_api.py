# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.7.0-dev

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from thamos.swagger_client.api_client import ApiClient


class ContainerImagesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def list_thoth_container_images(self, **kwargs):  # noqa: E501
        """List available Thoth container images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_thoth_container_images(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page offset in pagination
        :param int per_page: Number of items returned per page
        :param str os_name: Name of the operating system to consider
        :param str os_version: Version of the operating system to consider
        :param str python_version: Version of Python interpreter provided
        :param str cuda_version: Filter based on CUDA version available
        :param str image_name: Filter based on the image name
        :param str library_name: Filter based on library name
        :param str symbol: Filter based on symbol
        :param str package_name: Filter based on Python package name
        :param str rpm_package_name: Filter based on RPM package name
        :return: ContainerImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_thoth_container_images_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_thoth_container_images_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_thoth_container_images_with_http_info(self, **kwargs):  # noqa: E501
        """List available Thoth container images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_thoth_container_images_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page offset in pagination
        :param int per_page: Number of items returned per page
        :param str os_name: Name of the operating system to consider
        :param str os_version: Version of the operating system to consider
        :param str python_version: Version of Python interpreter provided
        :param str cuda_version: Filter based on CUDA version available
        :param str image_name: Filter based on the image name
        :param str library_name: Filter based on library name
        :param str symbol: Filter based on symbol
        :param str package_name: Filter based on Python package name
        :param str rpm_package_name: Filter based on RPM package name
        :return: ContainerImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page', 'os_name', 'os_version', 'python_version', 'cuda_version', 'image_name', 'library_name', 'symbol', 'package_name', 'rpm_package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_thoth_container_images" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'os_name' in params:
            query_params.append(('os_name', params['os_name']))  # noqa: E501
        if 'os_version' in params:
            query_params.append(('os_version', params['os_version']))  # noqa: E501
        if 'python_version' in params:
            query_params.append(('python_version', params['python_version']))  # noqa: E501
        if 'cuda_version' in params:
            query_params.append(('cuda_version', params['cuda_version']))  # noqa: E501
        if 'image_name' in params:
            query_params.append(('image_name', params['image_name']))  # noqa: E501
        if 'library_name' in params:
            query_params.append(('library_name', params['library_name']))  # noqa: E501
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'package_name' in params:
            query_params.append(('package_name', params['package_name']))  # noqa: E501
        if 'rpm_package_name' in params:
            query_params.append(('rpm_package_name', params['rpm_package_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/container-images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContainerImagesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
