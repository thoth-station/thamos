# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.7.0-dev

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdviserResultResponseResultReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error': 'str',
        'accepted_final_states_count': 'int',
        'discarded_final_states_count': 'int',
        'pipeline': 'AdviserResultResponseResultReportPipeline',
        'products': 'list[AdviserResultResponseResultReportProducts]',
        'resolver_iterations': 'int',
        'stack_info': 'StackInfo'
    }

    attribute_map = {
        'error': 'ERROR',
        'accepted_final_states_count': 'accepted_final_states_count',
        'discarded_final_states_count': 'discarded_final_states_count',
        'pipeline': 'pipeline',
        'products': 'products',
        'resolver_iterations': 'resolver_iterations',
        'stack_info': 'stack_info'
    }

    def __init__(self, error=None, accepted_final_states_count=None, discarded_final_states_count=None, pipeline=None, products=None, resolver_iterations=None, stack_info=None):  # noqa: E501
        """AdviserResultResponseResultReport - a model defined in Swagger"""  # noqa: E501
        self._error = None
        self._accepted_final_states_count = None
        self._discarded_final_states_count = None
        self._pipeline = None
        self._products = None
        self._resolver_iterations = None
        self._stack_info = None
        self.discriminator = None
        if error is not None:
            self.error = error
        if accepted_final_states_count is not None:
            self.accepted_final_states_count = accepted_final_states_count
        if discarded_final_states_count is not None:
            self.discarded_final_states_count = discarded_final_states_count
        if pipeline is not None:
            self.pipeline = pipeline
        if products is not None:
            self.products = products
        if resolver_iterations is not None:
            self.resolver_iterations = resolver_iterations
        self.stack_info = stack_info

    @property
    def error(self):
        """Gets the error of this AdviserResultResponseResultReport.  # noqa: E501

        Error message describing advise failure  # noqa: E501

        :return: The error of this AdviserResultResponseResultReport.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AdviserResultResponseResultReport.

        Error message describing advise failure  # noqa: E501

        :param error: The error of this AdviserResultResponseResultReport.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def accepted_final_states_count(self):
        """Gets the accepted_final_states_count of this AdviserResultResponseResultReport.  # noqa: E501

        Number of resolved states that were accepted  # noqa: E501

        :return: The accepted_final_states_count of this AdviserResultResponseResultReport.  # noqa: E501
        :rtype: int
        """
        return self._accepted_final_states_count

    @accepted_final_states_count.setter
    def accepted_final_states_count(self, accepted_final_states_count):
        """Sets the accepted_final_states_count of this AdviserResultResponseResultReport.

        Number of resolved states that were accepted  # noqa: E501

        :param accepted_final_states_count: The accepted_final_states_count of this AdviserResultResponseResultReport.  # noqa: E501
        :type: int
        """

        self._accepted_final_states_count = accepted_final_states_count

    @property
    def discarded_final_states_count(self):
        """Gets the discarded_final_states_count of this AdviserResultResponseResultReport.  # noqa: E501

        Number of states that were discarded during the resolution  # noqa: E501

        :return: The discarded_final_states_count of this AdviserResultResponseResultReport.  # noqa: E501
        :rtype: int
        """
        return self._discarded_final_states_count

    @discarded_final_states_count.setter
    def discarded_final_states_count(self, discarded_final_states_count):
        """Sets the discarded_final_states_count of this AdviserResultResponseResultReport.

        Number of states that were discarded during the resolution  # noqa: E501

        :param discarded_final_states_count: The discarded_final_states_count of this AdviserResultResponseResultReport.  # noqa: E501
        :type: int
        """

        self._discarded_final_states_count = discarded_final_states_count

    @property
    def pipeline(self):
        """Gets the pipeline of this AdviserResultResponseResultReport.  # noqa: E501


        :return: The pipeline of this AdviserResultResponseResultReport.  # noqa: E501
        :rtype: AdviserResultResponseResultReportPipeline
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline):
        """Sets the pipeline of this AdviserResultResponseResultReport.


        :param pipeline: The pipeline of this AdviserResultResponseResultReport.  # noqa: E501
        :type: AdviserResultResponseResultReportPipeline
        """

        self._pipeline = pipeline

    @property
    def products(self):
        """Gets the products of this AdviserResultResponseResultReport.  # noqa: E501

        Products computed in the deployment, always holds only one item   # noqa: E501

        :return: The products of this AdviserResultResponseResultReport.  # noqa: E501
        :rtype: list[AdviserResultResponseResultReportProducts]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this AdviserResultResponseResultReport.

        Products computed in the deployment, always holds only one item   # noqa: E501

        :param products: The products of this AdviserResultResponseResultReport.  # noqa: E501
        :type: list[AdviserResultResponseResultReportProducts]
        """

        self._products = products

    @property
    def resolver_iterations(self):
        """Gets the resolver_iterations of this AdviserResultResponseResultReport.  # noqa: E501

        Number of iterations done by the resolver to compute products   # noqa: E501

        :return: The resolver_iterations of this AdviserResultResponseResultReport.  # noqa: E501
        :rtype: int
        """
        return self._resolver_iterations

    @resolver_iterations.setter
    def resolver_iterations(self, resolver_iterations):
        """Sets the resolver_iterations of this AdviserResultResponseResultReport.

        Number of iterations done by the resolver to compute products   # noqa: E501

        :param resolver_iterations: The resolver_iterations of this AdviserResultResponseResultReport.  # noqa: E501
        :type: int
        """

        self._resolver_iterations = resolver_iterations

    @property
    def stack_info(self):
        """Gets the stack_info of this AdviserResultResponseResultReport.  # noqa: E501


        :return: The stack_info of this AdviserResultResponseResultReport.  # noqa: E501
        :rtype: StackInfo
        """
        return self._stack_info

    @stack_info.setter
    def stack_info(self, stack_info):
        """Sets the stack_info of this AdviserResultResponseResultReport.


        :param stack_info: The stack_info of this AdviserResultResponseResultReport.  # noqa: E501
        :type: StackInfo
        """
        if stack_info is None:
            raise ValueError("Invalid value for `stack_info`, must not be `None`")  # noqa: E501

        self._stack_info = stack_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdviserResultResponseResultReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdviserResultResponseResultReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
