# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.7.0-dev

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RuntimeEnvironmentHardware(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_model': 'int',
        'cpu_family': 'int',
        'gpu_model': 'str'
    }

    attribute_map = {
        'cpu_model': 'cpu_model',
        'cpu_family': 'cpu_family',
        'gpu_model': 'gpu_model'
    }

    def __init__(self, cpu_model=None, cpu_family=None, gpu_model=None):  # noqa: E501
        """RuntimeEnvironmentHardware - a model defined in Swagger"""  # noqa: E501
        self._cpu_model = None
        self._cpu_family = None
        self._gpu_model = None
        self.discriminator = None
        if cpu_model is not None:
            self.cpu_model = cpu_model
        if cpu_family is not None:
            self.cpu_family = cpu_family
        if gpu_model is not None:
            self.gpu_model = gpu_model

    @property
    def cpu_model(self):
        """Gets the cpu_model of this RuntimeEnvironmentHardware.  # noqa: E501


        :return: The cpu_model of this RuntimeEnvironmentHardware.  # noqa: E501
        :rtype: int
        """
        return self._cpu_model

    @cpu_model.setter
    def cpu_model(self, cpu_model):
        """Sets the cpu_model of this RuntimeEnvironmentHardware.


        :param cpu_model: The cpu_model of this RuntimeEnvironmentHardware.  # noqa: E501
        :type: int
        """

        self._cpu_model = cpu_model

    @property
    def cpu_family(self):
        """Gets the cpu_family of this RuntimeEnvironmentHardware.  # noqa: E501


        :return: The cpu_family of this RuntimeEnvironmentHardware.  # noqa: E501
        :rtype: int
        """
        return self._cpu_family

    @cpu_family.setter
    def cpu_family(self, cpu_family):
        """Sets the cpu_family of this RuntimeEnvironmentHardware.


        :param cpu_family: The cpu_family of this RuntimeEnvironmentHardware.  # noqa: E501
        :type: int
        """

        self._cpu_family = cpu_family

    @property
    def gpu_model(self):
        """Gets the gpu_model of this RuntimeEnvironmentHardware.  # noqa: E501


        :return: The gpu_model of this RuntimeEnvironmentHardware.  # noqa: E501
        :rtype: str
        """
        return self._gpu_model

    @gpu_model.setter
    def gpu_model(self, gpu_model):
        """Sets the gpu_model of this RuntimeEnvironmentHardware.


        :param gpu_model: The gpu_model of this RuntimeEnvironmentHardware.  # noqa: E501
        :type: str
        """

        self._gpu_model = gpu_model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuntimeEnvironmentHardware, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuntimeEnvironmentHardware):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
