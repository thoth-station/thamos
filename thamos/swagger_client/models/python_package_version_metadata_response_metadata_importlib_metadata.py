# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.7.0-dev

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PythonPackageVersionMetadataResponseMetadataImportlibMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_points': 'list[PythonPackageVersionMetadataResponseMetadataImportlibMetadataEntryPoints]',
        'files': 'list',
        'metadata': 'object',
        'requires': 'list[str]',
        'version': 'str'
    }

    attribute_map = {
        'entry_points': 'entry_points',
        'files': 'files',
        'metadata': 'metadata',
        'requires': 'requires',
        'version': 'version'
    }

    def __init__(self, entry_points=None, files=None, metadata=None, requires=None, version=None):  # noqa: E501
        """PythonPackageVersionMetadataResponseMetadataImportlibMetadata - a model defined in Swagger"""  # noqa: E501
        self._entry_points = None
        self._files = None
        self._metadata = None
        self._requires = None
        self._version = None
        self.discriminator = None
        self.entry_points = entry_points
        self.files = files
        self.metadata = metadata
        self.requires = requires
        self.version = version

    @property
    def entry_points(self):
        """Gets the entry_points of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.  # noqa: E501


        :return: The entry_points of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.  # noqa: E501
        :rtype: list[PythonPackageVersionMetadataResponseMetadataImportlibMetadataEntryPoints]
        """
        return self._entry_points

    @entry_points.setter
    def entry_points(self, entry_points):
        """Sets the entry_points of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.


        :param entry_points: The entry_points of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.  # noqa: E501
        :type: list[PythonPackageVersionMetadataResponseMetadataImportlibMetadataEntryPoints]
        """
        if entry_points is None:
            raise ValueError("Invalid value for `entry_points`, must not be `None`")  # noqa: E501

        self._entry_points = entry_points

    @property
    def files(self):
        """Gets the files of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.  # noqa: E501

        Files shipped with the Python package  # noqa: E501

        :return: The files of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.  # noqa: E501
        :rtype: list
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.

        Files shipped with the Python package  # noqa: E501

        :param files: The files of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.  # noqa: E501
        :type: list
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")  # noqa: E501

        self._files = files

    @property
    def metadata(self):
        """Gets the metadata of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.  # noqa: E501

        Core Python packaging metadata extracted  # noqa: E501

        :return: The metadata of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.

        Core Python packaging metadata extracted  # noqa: E501

        :param metadata: The metadata of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.  # noqa: E501
        :type: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def requires(self):
        """Gets the requires of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.  # noqa: E501

        Python requirements of the given package  # noqa: E501

        :return: The requires of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._requires

    @requires.setter
    def requires(self, requires):
        """Sets the requires of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.

        Python requirements of the given package  # noqa: E501

        :param requires: The requires of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.  # noqa: E501
        :type: list[str]
        """
        if requires is None:
            raise ValueError("Invalid value for `requires`, must not be `None`")  # noqa: E501

        self._requires = requires

    @property
    def version(self):
        """Gets the version of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.  # noqa: E501

        Version of the Python package based on importlib metadata detection   # noqa: E501

        :return: The version of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.

        Version of the Python package based on importlib metadata detection   # noqa: E501

        :param version: The version of this PythonPackageVersionMetadataResponseMetadataImportlibMetadata.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PythonPackageVersionMetadataResponseMetadataImportlibMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PythonPackageVersionMetadataResponseMetadataImportlibMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
