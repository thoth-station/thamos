# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.7.0-dev

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalysisResultResponseResultDebdependencies(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'version': 'str',
        'epoch': 'str',
        'depends': 'AnalysisResultResponseResultDepends',
        'pre_depends': 'object',
        'replaces': 'object'
    }

    attribute_map = {
        'name': 'name',
        'version': 'version',
        'epoch': 'epoch',
        'depends': 'depends',
        'pre_depends': 'pre-depends',
        'replaces': 'replaces'
    }

    def __init__(self, name=None, version=None, epoch=None, depends=None, pre_depends=None, replaces=None):  # noqa: E501
        """AnalysisResultResponseResultDebdependencies - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._version = None
        self._epoch = None
        self._depends = None
        self._pre_depends = None
        self._replaces = None
        self.discriminator = None
        self.name = name
        self.version = version
        self.epoch = epoch
        self.depends = depends
        self.pre_depends = pre_depends
        self.replaces = replaces

    @property
    def name(self):
        """Gets the name of this AnalysisResultResponseResultDebdependencies.  # noqa: E501

        Debian package name  # noqa: E501

        :return: The name of this AnalysisResultResponseResultDebdependencies.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalysisResultResponseResultDebdependencies.

        Debian package name  # noqa: E501

        :param name: The name of this AnalysisResultResponseResultDebdependencies.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this AnalysisResultResponseResultDebdependencies.  # noqa: E501

        Debian package version  # noqa: E501

        :return: The version of this AnalysisResultResponseResultDebdependencies.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AnalysisResultResponseResultDebdependencies.

        Debian package version  # noqa: E501

        :param version: The version of this AnalysisResultResponseResultDebdependencies.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def epoch(self):
        """Gets the epoch of this AnalysisResultResponseResultDebdependencies.  # noqa: E501

        Debian package epoch  # noqa: E501

        :return: The epoch of this AnalysisResultResponseResultDebdependencies.  # noqa: E501
        :rtype: str
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch):
        """Sets the epoch of this AnalysisResultResponseResultDebdependencies.

        Debian package epoch  # noqa: E501

        :param epoch: The epoch of this AnalysisResultResponseResultDebdependencies.  # noqa: E501
        :type: str
        """
        if epoch is None:
            raise ValueError("Invalid value for `epoch`, must not be `None`")  # noqa: E501

        self._epoch = epoch

    @property
    def depends(self):
        """Gets the depends of this AnalysisResultResponseResultDebdependencies.  # noqa: E501


        :return: The depends of this AnalysisResultResponseResultDebdependencies.  # noqa: E501
        :rtype: AnalysisResultResponseResultDepends
        """
        return self._depends

    @depends.setter
    def depends(self, depends):
        """Sets the depends of this AnalysisResultResponseResultDebdependencies.


        :param depends: The depends of this AnalysisResultResponseResultDebdependencies.  # noqa: E501
        :type: AnalysisResultResponseResultDepends
        """
        if depends is None:
            raise ValueError("Invalid value for `depends`, must not be `None`")  # noqa: E501

        self._depends = depends

    @property
    def pre_depends(self):
        """Gets the pre_depends of this AnalysisResultResponseResultDebdependencies.  # noqa: E501


        :return: The pre_depends of this AnalysisResultResponseResultDebdependencies.  # noqa: E501
        :rtype: object
        """
        return self._pre_depends

    @pre_depends.setter
    def pre_depends(self, pre_depends):
        """Sets the pre_depends of this AnalysisResultResponseResultDebdependencies.


        :param pre_depends: The pre_depends of this AnalysisResultResponseResultDebdependencies.  # noqa: E501
        :type: object
        """
        if pre_depends is None:
            raise ValueError("Invalid value for `pre_depends`, must not be `None`")  # noqa: E501

        self._pre_depends = pre_depends

    @property
    def replaces(self):
        """Gets the replaces of this AnalysisResultResponseResultDebdependencies.  # noqa: E501


        :return: The replaces of this AnalysisResultResponseResultDebdependencies.  # noqa: E501
        :rtype: object
        """
        return self._replaces

    @replaces.setter
    def replaces(self, replaces):
        """Sets the replaces of this AnalysisResultResponseResultDebdependencies.


        :param replaces: The replaces of this AnalysisResultResponseResultDebdependencies.  # noqa: E501
        :type: object
        """
        if replaces is None:
            raise ValueError("Invalid value for `replaces`, must not be `None`")  # noqa: E501

        self._replaces = replaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalysisResultResponseResultDebdependencies, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisResultResponseResultDebdependencies):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
