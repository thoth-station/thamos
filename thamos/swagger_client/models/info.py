# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Info(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amun_api_url': 'str',
        'backend_namespace': 'str',
        'deployment_name': 'str',
        'dgraph_host': 'str',
        'frontend_namespace': 'str',
        'middletier_namespace': 'str',
        's3_bucket_prefix': 'str',
        's3_endpoint_url': 'str',
        'version': 'str'
    }

    attribute_map = {
        'amun_api_url': 'amun_api_url',
        'backend_namespace': 'backend_namespace',
        'deployment_name': 'deployment_name',
        'dgraph_host': 'dgraph_host',
        'frontend_namespace': 'frontend_namespace',
        'middletier_namespace': 'middletier_namespace',
        's3_bucket_prefix': 's3_bucket_prefix',
        's3_endpoint_url': 's3_endpoint_url',
        'version': 'version'
    }

    def __init__(self, amun_api_url=None, backend_namespace=None, deployment_name=None, dgraph_host=None, frontend_namespace=None, middletier_namespace=None, s3_bucket_prefix=None, s3_endpoint_url=None, version=None):  # noqa: E501
        """Info - a model defined in Swagger"""  # noqa: E501
        self._amun_api_url = None
        self._backend_namespace = None
        self._deployment_name = None
        self._dgraph_host = None
        self._frontend_namespace = None
        self._middletier_namespace = None
        self._s3_bucket_prefix = None
        self._s3_endpoint_url = None
        self._version = None
        self.discriminator = None
        if amun_api_url is not None:
            self.amun_api_url = amun_api_url
        if backend_namespace is not None:
            self.backend_namespace = backend_namespace
        if deployment_name is not None:
            self.deployment_name = deployment_name
        if dgraph_host is not None:
            self.dgraph_host = dgraph_host
        if frontend_namespace is not None:
            self.frontend_namespace = frontend_namespace
        if middletier_namespace is not None:
            self.middletier_namespace = middletier_namespace
        if s3_bucket_prefix is not None:
            self.s3_bucket_prefix = s3_bucket_prefix
        if s3_endpoint_url is not None:
            self.s3_endpoint_url = s3_endpoint_url
        if version is not None:
            self.version = version

    @property
    def amun_api_url(self):
        """Gets the amun_api_url of this Info.  # noqa: E501

        Amun API host to which this deployment talks to (set to null if no Amun deployment is used).  # noqa: E501

        :return: The amun_api_url of this Info.  # noqa: E501
        :rtype: str
        """
        return self._amun_api_url

    @amun_api_url.setter
    def amun_api_url(self, amun_api_url):
        """Sets the amun_api_url of this Info.

        Amun API host to which this deployment talks to (set to null if no Amun deployment is used).  # noqa: E501

        :param amun_api_url: The amun_api_url of this Info.  # noqa: E501
        :type: str
        """

        self._amun_api_url = amun_api_url

    @property
    def backend_namespace(self):
        """Gets the backend_namespace of this Info.  # noqa: E501

        Frontend namespace name.  # noqa: E501

        :return: The backend_namespace of this Info.  # noqa: E501
        :rtype: str
        """
        return self._backend_namespace

    @backend_namespace.setter
    def backend_namespace(self, backend_namespace):
        """Sets the backend_namespace of this Info.

        Frontend namespace name.  # noqa: E501

        :param backend_namespace: The backend_namespace of this Info.  # noqa: E501
        :type: str
        """

        self._backend_namespace = backend_namespace

    @property
    def deployment_name(self):
        """Gets the deployment_name of this Info.  # noqa: E501

        Name of deployment.  # noqa: E501

        :return: The deployment_name of this Info.  # noqa: E501
        :rtype: str
        """
        return self._deployment_name

    @deployment_name.setter
    def deployment_name(self, deployment_name):
        """Sets the deployment_name of this Info.

        Name of deployment.  # noqa: E501

        :param deployment_name: The deployment_name of this Info.  # noqa: E501
        :type: str
        """

        self._deployment_name = deployment_name

    @property
    def dgraph_host(self):
        """Gets the dgraph_host of this Info.  # noqa: E501

        Dgraph instance to which the deployment talks to.  # noqa: E501

        :return: The dgraph_host of this Info.  # noqa: E501
        :rtype: str
        """
        return self._dgraph_host

    @dgraph_host.setter
    def dgraph_host(self, dgraph_host):
        """Sets the dgraph_host of this Info.

        Dgraph instance to which the deployment talks to.  # noqa: E501

        :param dgraph_host: The dgraph_host of this Info.  # noqa: E501
        :type: str
        """

        self._dgraph_host = dgraph_host

    @property
    def frontend_namespace(self):
        """Gets the frontend_namespace of this Info.  # noqa: E501

        Frontend namespace name.  # noqa: E501

        :return: The frontend_namespace of this Info.  # noqa: E501
        :rtype: str
        """
        return self._frontend_namespace

    @frontend_namespace.setter
    def frontend_namespace(self, frontend_namespace):
        """Sets the frontend_namespace of this Info.

        Frontend namespace name.  # noqa: E501

        :param frontend_namespace: The frontend_namespace of this Info.  # noqa: E501
        :type: str
        """

        self._frontend_namespace = frontend_namespace

    @property
    def middletier_namespace(self):
        """Gets the middletier_namespace of this Info.  # noqa: E501

        Frontend namespace name.  # noqa: E501

        :return: The middletier_namespace of this Info.  # noqa: E501
        :rtype: str
        """
        return self._middletier_namespace

    @middletier_namespace.setter
    def middletier_namespace(self, middletier_namespace):
        """Sets the middletier_namespace of this Info.

        Frontend namespace name.  # noqa: E501

        :param middletier_namespace: The middletier_namespace of this Info.  # noqa: E501
        :type: str
        """

        self._middletier_namespace = middletier_namespace

    @property
    def s3_bucket_prefix(self):
        """Gets the s3_bucket_prefix of this Info.  # noqa: E501

        Bucket prefix used when storing results on S3 compatible API (Ceph).  # noqa: E501

        :return: The s3_bucket_prefix of this Info.  # noqa: E501
        :rtype: str
        """
        return self._s3_bucket_prefix

    @s3_bucket_prefix.setter
    def s3_bucket_prefix(self, s3_bucket_prefix):
        """Sets the s3_bucket_prefix of this Info.

        Bucket prefix used when storing results on S3 compatible API (Ceph).  # noqa: E501

        :param s3_bucket_prefix: The s3_bucket_prefix of this Info.  # noqa: E501
        :type: str
        """

        self._s3_bucket_prefix = s3_bucket_prefix

    @property
    def s3_endpoint_url(self):
        """Gets the s3_endpoint_url of this Info.  # noqa: E501

        S3 endpoint used for storing results.  # noqa: E501

        :return: The s3_endpoint_url of this Info.  # noqa: E501
        :rtype: str
        """
        return self._s3_endpoint_url

    @s3_endpoint_url.setter
    def s3_endpoint_url(self, s3_endpoint_url):
        """Sets the s3_endpoint_url of this Info.

        S3 endpoint used for storing results.  # noqa: E501

        :param s3_endpoint_url: The s3_endpoint_url of this Info.  # noqa: E501
        :type: str
        """

        self._s3_endpoint_url = s3_endpoint_url

    @property
    def version(self):
        """Gets the version of this Info.  # noqa: E501

        Version of Thoth components deployed. A special value @dev signalizes a developer's build.  # noqa: E501

        :return: The version of this Info.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Info.

        Version of Thoth components deployed. A special value @dev signalizes a developer's build.  # noqa: E501

        :param version: The version of this Info.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Info, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Info):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
