# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.7.0-dev

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProvenanceResultResponseResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error': 'bool',
        'error_msg': 'str',
        'input': 'object',
        'parameters': 'ProvenanceResultResponseResultParameters',
        'report': 'list[object]'
    }

    attribute_map = {
        'error': 'error',
        'error_msg': 'error_msg',
        'input': 'input',
        'parameters': 'parameters',
        'report': 'report'
    }

    def __init__(self, error=None, error_msg=None, input=None, parameters=None, report=None):  # noqa: E501
        """ProvenanceResultResponseResult - a model defined in Swagger"""  # noqa: E501
        self._error = None
        self._error_msg = None
        self._input = None
        self._parameters = None
        self._report = None
        self.discriminator = None
        self.error = error
        self.error_msg = error_msg
        self.input = input
        self.parameters = parameters
        self.report = report

    @property
    def error(self):
        """Gets the error of this ProvenanceResultResponseResult.  # noqa: E501

        A flag set to true if an error was encountered  # noqa: E501

        :return: The error of this ProvenanceResultResponseResult.  # noqa: E501
        :rtype: bool
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ProvenanceResultResponseResult.

        A flag set to true if an error was encountered  # noqa: E501

        :param error: The error of this ProvenanceResultResponseResult.  # noqa: E501
        :type: bool
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501

        self._error = error

    @property
    def error_msg(self):
        """Gets the error_msg of this ProvenanceResultResponseResult.  # noqa: E501

        An error message reported to users  # noqa: E501

        :return: The error_msg of this ProvenanceResultResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._error_msg

    @error_msg.setter
    def error_msg(self, error_msg):
        """Sets the error_msg of this ProvenanceResultResponseResult.

        An error message reported to users  # noqa: E501

        :param error_msg: The error_msg of this ProvenanceResultResponseResult.  # noqa: E501
        :type: str
        """

        self._error_msg = error_msg

    @property
    def input(self):
        """Gets the input of this ProvenanceResultResponseResult.  # noqa: E501


        :return: The input of this ProvenanceResultResponseResult.  # noqa: E501
        :rtype: object
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this ProvenanceResultResponseResult.


        :param input: The input of this ProvenanceResultResponseResult.  # noqa: E501
        :type: object
        """

        self._input = input

    @property
    def parameters(self):
        """Gets the parameters of this ProvenanceResultResponseResult.  # noqa: E501


        :return: The parameters of this ProvenanceResultResponseResult.  # noqa: E501
        :rtype: ProvenanceResultResponseResultParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ProvenanceResultResponseResult.


        :param parameters: The parameters of this ProvenanceResultResponseResult.  # noqa: E501
        :type: ProvenanceResultResponseResultParameters
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def report(self):
        """Gets the report of this ProvenanceResultResponseResult.  # noqa: E501

        A provenance check report  # noqa: E501

        :return: The report of this ProvenanceResultResponseResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this ProvenanceResultResponseResult.

        A provenance check report  # noqa: E501

        :param report: The report of this ProvenanceResultResponseResult.  # noqa: E501
        :type: list[object]
        """
        if report is None:
            raise ValueError("Invalid value for `report`, must not be `None`")  # noqa: E501

        self._report = report

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvenanceResultResponseResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvenanceResultResponseResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
