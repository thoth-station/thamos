# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.7.0-dev

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalysisResultResponseResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aicoe_ci': 'AnalysisResultResponseResultAicoeci',
        'cuda_version': 'object',
        'deb': 'list[AnalysisResultResponseResultDeb]',
        'deb_dependencies': 'list[AnalysisResultResponseResultDebdependencies]',
        'image_size': 'int',
        'layers': 'list[str]',
        'mercator': 'object',
        'operating_system': 'object',
        'python_files': 'list[AnalysisResultResponseResultPythonfiles]',
        'python_interpreters': 'list[AnalysisResultResponseResultPythoninterpreters]',
        'python_packages': 'list[AnalysisResultResponseResultPythonpackages]',
        'rpm': 'list[str]',
        'rpm_dependencies': 'list[object]',
        'skopeo_inspect': 'object',
        'system_symbols': 'object'
    }

    attribute_map = {
        'aicoe_ci': 'aicoe-ci',
        'cuda_version': 'cuda-version',
        'deb': 'deb',
        'deb_dependencies': 'deb-dependencies',
        'image_size': 'image_size',
        'layers': 'layers',
        'mercator': 'mercator',
        'operating_system': 'operating-system',
        'python_files': 'python-files',
        'python_interpreters': 'python-interpreters',
        'python_packages': 'python-packages',
        'rpm': 'rpm',
        'rpm_dependencies': 'rpm-dependencies',
        'skopeo_inspect': 'skopeo-inspect',
        'system_symbols': 'system-symbols'
    }

    def __init__(self, aicoe_ci=None, cuda_version=None, deb=None, deb_dependencies=None, image_size=None, layers=None, mercator=None, operating_system=None, python_files=None, python_interpreters=None, python_packages=None, rpm=None, rpm_dependencies=None, skopeo_inspect=None, system_symbols=None):  # noqa: E501
        """AnalysisResultResponseResult - a model defined in Swagger"""  # noqa: E501
        self._aicoe_ci = None
        self._cuda_version = None
        self._deb = None
        self._deb_dependencies = None
        self._image_size = None
        self._layers = None
        self._mercator = None
        self._operating_system = None
        self._python_files = None
        self._python_interpreters = None
        self._python_packages = None
        self._rpm = None
        self._rpm_dependencies = None
        self._skopeo_inspect = None
        self._system_symbols = None
        self.discriminator = None
        self.aicoe_ci = aicoe_ci
        self.cuda_version = cuda_version
        self.deb = deb
        self.deb_dependencies = deb_dependencies
        self.image_size = image_size
        self.layers = layers
        self.mercator = mercator
        self.operating_system = operating_system
        self.python_files = python_files
        self.python_interpreters = python_interpreters
        self.python_packages = python_packages
        self.rpm = rpm
        self.rpm_dependencies = rpm_dependencies
        self.skopeo_inspect = skopeo_inspect
        self.system_symbols = system_symbols

    @property
    def aicoe_ci(self):
        """Gets the aicoe_ci of this AnalysisResultResponseResult.  # noqa: E501


        :return: The aicoe_ci of this AnalysisResultResponseResult.  # noqa: E501
        :rtype: AnalysisResultResponseResultAicoeci
        """
        return self._aicoe_ci

    @aicoe_ci.setter
    def aicoe_ci(self, aicoe_ci):
        """Sets the aicoe_ci of this AnalysisResultResponseResult.


        :param aicoe_ci: The aicoe_ci of this AnalysisResultResponseResult.  # noqa: E501
        :type: AnalysisResultResponseResultAicoeci
        """
        if aicoe_ci is None:
            raise ValueError("Invalid value for `aicoe_ci`, must not be `None`")  # noqa: E501

        self._aicoe_ci = aicoe_ci

    @property
    def cuda_version(self):
        """Gets the cuda_version of this AnalysisResultResponseResult.  # noqa: E501

        Nvidia CUDA version detected - path is the key and CUDA version is the object value   # noqa: E501

        :return: The cuda_version of this AnalysisResultResponseResult.  # noqa: E501
        :rtype: object
        """
        return self._cuda_version

    @cuda_version.setter
    def cuda_version(self, cuda_version):
        """Sets the cuda_version of this AnalysisResultResponseResult.

        Nvidia CUDA version detected - path is the key and CUDA version is the object value   # noqa: E501

        :param cuda_version: The cuda_version of this AnalysisResultResponseResult.  # noqa: E501
        :type: object
        """
        if cuda_version is None:
            raise ValueError("Invalid value for `cuda_version`, must not be `None`")  # noqa: E501

        self._cuda_version = cuda_version

    @property
    def deb(self):
        """Gets the deb of this AnalysisResultResponseResult.  # noqa: E501

        Debian packages detected (experimental)  # noqa: E501

        :return: The deb of this AnalysisResultResponseResult.  # noqa: E501
        :rtype: list[AnalysisResultResponseResultDeb]
        """
        return self._deb

    @deb.setter
    def deb(self, deb):
        """Sets the deb of this AnalysisResultResponseResult.

        Debian packages detected (experimental)  # noqa: E501

        :param deb: The deb of this AnalysisResultResponseResult.  # noqa: E501
        :type: list[AnalysisResultResponseResultDeb]
        """
        if deb is None:
            raise ValueError("Invalid value for `deb`, must not be `None`")  # noqa: E501

        self._deb = deb

    @property
    def deb_dependencies(self):
        """Gets the deb_dependencies of this AnalysisResultResponseResult.  # noqa: E501

        Dependencies of Debian packages detected  # noqa: E501

        :return: The deb_dependencies of this AnalysisResultResponseResult.  # noqa: E501
        :rtype: list[AnalysisResultResponseResultDebdependencies]
        """
        return self._deb_dependencies

    @deb_dependencies.setter
    def deb_dependencies(self, deb_dependencies):
        """Sets the deb_dependencies of this AnalysisResultResponseResult.

        Dependencies of Debian packages detected  # noqa: E501

        :param deb_dependencies: The deb_dependencies of this AnalysisResultResponseResult.  # noqa: E501
        :type: list[AnalysisResultResponseResultDebdependencies]
        """
        if deb_dependencies is None:
            raise ValueError("Invalid value for `deb_dependencies`, must not be `None`")  # noqa: E501

        self._deb_dependencies = deb_dependencies

    @property
    def image_size(self):
        """Gets the image_size of this AnalysisResultResponseResult.  # noqa: E501

        Size of the container image in bytes  # noqa: E501

        :return: The image_size of this AnalysisResultResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._image_size

    @image_size.setter
    def image_size(self, image_size):
        """Sets the image_size of this AnalysisResultResponseResult.

        Size of the container image in bytes  # noqa: E501

        :param image_size: The image_size of this AnalysisResultResponseResult.  # noqa: E501
        :type: int
        """
        if image_size is None:
            raise ValueError("Invalid value for `image_size`, must not be `None`")  # noqa: E501

        self._image_size = image_size

    @property
    def layers(self):
        """Gets the layers of this AnalysisResultResponseResult.  # noqa: E501

        Container image layers, sorted based on the layer precedence   # noqa: E501

        :return: The layers of this AnalysisResultResponseResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this AnalysisResultResponseResult.

        Container image layers, sorted based on the layer precedence   # noqa: E501

        :param layers: The layers of this AnalysisResultResponseResult.  # noqa: E501
        :type: list[str]
        """
        if layers is None:
            raise ValueError("Invalid value for `layers`, must not be `None`")  # noqa: E501

        self._layers = layers

    @property
    def mercator(self):
        """Gets the mercator of this AnalysisResultResponseResult.  # noqa: E501

        Mercator (TM) output  # noqa: E501

        :return: The mercator of this AnalysisResultResponseResult.  # noqa: E501
        :rtype: object
        """
        return self._mercator

    @mercator.setter
    def mercator(self, mercator):
        """Sets the mercator of this AnalysisResultResponseResult.

        Mercator (TM) output  # noqa: E501

        :param mercator: The mercator of this AnalysisResultResponseResult.  # noqa: E501
        :type: object
        """
        if mercator is None:
            raise ValueError("Invalid value for `mercator`, must not be `None`")  # noqa: E501

        self._mercator = mercator

    @property
    def operating_system(self):
        """Gets the operating_system of this AnalysisResultResponseResult.  # noqa: E501

        Operating System information  # noqa: E501

        :return: The operating_system of this AnalysisResultResponseResult.  # noqa: E501
        :rtype: object
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this AnalysisResultResponseResult.

        Operating System information  # noqa: E501

        :param operating_system: The operating_system of this AnalysisResultResponseResult.  # noqa: E501
        :type: object
        """
        if operating_system is None:
            raise ValueError("Invalid value for `operating_system`, must not be `None`")  # noqa: E501

        self._operating_system = operating_system

    @property
    def python_files(self):
        """Gets the python_files of this AnalysisResultResponseResult.  # noqa: E501

        Python files detected in the container image  # noqa: E501

        :return: The python_files of this AnalysisResultResponseResult.  # noqa: E501
        :rtype: list[AnalysisResultResponseResultPythonfiles]
        """
        return self._python_files

    @python_files.setter
    def python_files(self, python_files):
        """Sets the python_files of this AnalysisResultResponseResult.

        Python files detected in the container image  # noqa: E501

        :param python_files: The python_files of this AnalysisResultResponseResult.  # noqa: E501
        :type: list[AnalysisResultResponseResultPythonfiles]
        """
        if python_files is None:
            raise ValueError("Invalid value for `python_files`, must not be `None`")  # noqa: E501

        self._python_files = python_files

    @property
    def python_interpreters(self):
        """Gets the python_interpreters of this AnalysisResultResponseResult.  # noqa: E501

        Python interpreters detected inside the container image  # noqa: E501

        :return: The python_interpreters of this AnalysisResultResponseResult.  # noqa: E501
        :rtype: list[AnalysisResultResponseResultPythoninterpreters]
        """
        return self._python_interpreters

    @python_interpreters.setter
    def python_interpreters(self, python_interpreters):
        """Sets the python_interpreters of this AnalysisResultResponseResult.

        Python interpreters detected inside the container image  # noqa: E501

        :param python_interpreters: The python_interpreters of this AnalysisResultResponseResult.  # noqa: E501
        :type: list[AnalysisResultResponseResultPythoninterpreters]
        """
        if python_interpreters is None:
            raise ValueError("Invalid value for `python_interpreters`, must not be `None`")  # noqa: E501

        self._python_interpreters = python_interpreters

    @property
    def python_packages(self):
        """Gets the python_packages of this AnalysisResultResponseResult.  # noqa: E501

        Detected Python packages inside the container image  # noqa: E501

        :return: The python_packages of this AnalysisResultResponseResult.  # noqa: E501
        :rtype: list[AnalysisResultResponseResultPythonpackages]
        """
        return self._python_packages

    @python_packages.setter
    def python_packages(self, python_packages):
        """Sets the python_packages of this AnalysisResultResponseResult.

        Detected Python packages inside the container image  # noqa: E501

        :param python_packages: The python_packages of this AnalysisResultResponseResult.  # noqa: E501
        :type: list[AnalysisResultResponseResultPythonpackages]
        """
        if python_packages is None:
            raise ValueError("Invalid value for `python_packages`, must not be `None`")  # noqa: E501

        self._python_packages = python_packages

    @property
    def rpm(self):
        """Gets the rpm of this AnalysisResultResponseResult.  # noqa: E501

        A listing of container images found inside the analyzed container image   # noqa: E501

        :return: The rpm of this AnalysisResultResponseResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._rpm

    @rpm.setter
    def rpm(self, rpm):
        """Sets the rpm of this AnalysisResultResponseResult.

        A listing of container images found inside the analyzed container image   # noqa: E501

        :param rpm: The rpm of this AnalysisResultResponseResult.  # noqa: E501
        :type: list[str]
        """
        if rpm is None:
            raise ValueError("Invalid value for `rpm`, must not be `None`")  # noqa: E501

        self._rpm = rpm

    @property
    def rpm_dependencies(self):
        """Gets the rpm_dependencies of this AnalysisResultResponseResult.  # noqa: E501

        Information about RPM packages and their dependencies  # noqa: E501

        :return: The rpm_dependencies of this AnalysisResultResponseResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._rpm_dependencies

    @rpm_dependencies.setter
    def rpm_dependencies(self, rpm_dependencies):
        """Sets the rpm_dependencies of this AnalysisResultResponseResult.

        Information about RPM packages and their dependencies  # noqa: E501

        :param rpm_dependencies: The rpm_dependencies of this AnalysisResultResponseResult.  # noqa: E501
        :type: list[object]
        """
        if rpm_dependencies is None:
            raise ValueError("Invalid value for `rpm_dependencies`, must not be `None`")  # noqa: E501

        self._rpm_dependencies = rpm_dependencies

    @property
    def skopeo_inspect(self):
        """Gets the skopeo_inspect of this AnalysisResultResponseResult.  # noqa: E501


        :return: The skopeo_inspect of this AnalysisResultResponseResult.  # noqa: E501
        :rtype: object
        """
        return self._skopeo_inspect

    @skopeo_inspect.setter
    def skopeo_inspect(self, skopeo_inspect):
        """Sets the skopeo_inspect of this AnalysisResultResponseResult.


        :param skopeo_inspect: The skopeo_inspect of this AnalysisResultResponseResult.  # noqa: E501
        :type: object
        """
        if skopeo_inspect is None:
            raise ValueError("Invalid value for `skopeo_inspect`, must not be `None`")  # noqa: E501

        self._skopeo_inspect = skopeo_inspect

    @property
    def system_symbols(self):
        """Gets the system_symbols of this AnalysisResultResponseResult.  # noqa: E501

        Systems symbols detected - a path mapping to exported symbols available   # noqa: E501

        :return: The system_symbols of this AnalysisResultResponseResult.  # noqa: E501
        :rtype: object
        """
        return self._system_symbols

    @system_symbols.setter
    def system_symbols(self, system_symbols):
        """Sets the system_symbols of this AnalysisResultResponseResult.

        Systems symbols detected - a path mapping to exported symbols available   # noqa: E501

        :param system_symbols: The system_symbols of this AnalysisResultResponseResult.  # noqa: E501
        :type: object
        """
        if system_symbols is None:
            raise ValueError("Invalid value for `system_symbols`, must not be `None`")  # noqa: E501

        self._system_symbols = system_symbols

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalysisResultResponseResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisResultResponseResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
