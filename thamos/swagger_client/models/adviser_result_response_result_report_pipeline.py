# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.7.0-dev

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdviserResultResponseResultReportPipeline(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boots': 'list[AdviserResultResponseResultReportPipelineBoots]',
        'pseudonyms': 'list[object]',
        'sieves': 'list[object]',
        'steps': 'list[object]',
        'strides': 'list[object]',
        'wraps': 'list[object]'
    }

    attribute_map = {
        'boots': 'boots',
        'pseudonyms': 'pseudonyms',
        'sieves': 'sieves',
        'steps': 'steps',
        'strides': 'strides',
        'wraps': 'wraps'
    }

    def __init__(self, boots=None, pseudonyms=None, sieves=None, steps=None, strides=None, wraps=None):  # noqa: E501
        """AdviserResultResponseResultReportPipeline - a model defined in Swagger"""  # noqa: E501
        self._boots = None
        self._pseudonyms = None
        self._sieves = None
        self._steps = None
        self._strides = None
        self._wraps = None
        self.discriminator = None
        self.boots = boots
        self.pseudonyms = pseudonyms
        self.sieves = sieves
        self.steps = steps
        self.strides = strides
        self.wraps = wraps

    @property
    def boots(self):
        """Gets the boots of this AdviserResultResponseResultReportPipeline.  # noqa: E501

        Boot pipeline unit types registered to the resolution process   # noqa: E501

        :return: The boots of this AdviserResultResponseResultReportPipeline.  # noqa: E501
        :rtype: list[AdviserResultResponseResultReportPipelineBoots]
        """
        return self._boots

    @boots.setter
    def boots(self, boots):
        """Sets the boots of this AdviserResultResponseResultReportPipeline.

        Boot pipeline unit types registered to the resolution process   # noqa: E501

        :param boots: The boots of this AdviserResultResponseResultReportPipeline.  # noqa: E501
        :type: list[AdviserResultResponseResultReportPipelineBoots]
        """
        if boots is None:
            raise ValueError("Invalid value for `boots`, must not be `None`")  # noqa: E501

        self._boots = boots

    @property
    def pseudonyms(self):
        """Gets the pseudonyms of this AdviserResultResponseResultReportPipeline.  # noqa: E501

        Pseudonym pipeline unit types registered to the resolution process   # noqa: E501

        :return: The pseudonyms of this AdviserResultResponseResultReportPipeline.  # noqa: E501
        :rtype: list[object]
        """
        return self._pseudonyms

    @pseudonyms.setter
    def pseudonyms(self, pseudonyms):
        """Sets the pseudonyms of this AdviserResultResponseResultReportPipeline.

        Pseudonym pipeline unit types registered to the resolution process   # noqa: E501

        :param pseudonyms: The pseudonyms of this AdviserResultResponseResultReportPipeline.  # noqa: E501
        :type: list[object]
        """
        if pseudonyms is None:
            raise ValueError("Invalid value for `pseudonyms`, must not be `None`")  # noqa: E501

        self._pseudonyms = pseudonyms

    @property
    def sieves(self):
        """Gets the sieves of this AdviserResultResponseResultReportPipeline.  # noqa: E501

        Sieve pipeline unit types registered to the resolution process   # noqa: E501

        :return: The sieves of this AdviserResultResponseResultReportPipeline.  # noqa: E501
        :rtype: list[object]
        """
        return self._sieves

    @sieves.setter
    def sieves(self, sieves):
        """Sets the sieves of this AdviserResultResponseResultReportPipeline.

        Sieve pipeline unit types registered to the resolution process   # noqa: E501

        :param sieves: The sieves of this AdviserResultResponseResultReportPipeline.  # noqa: E501
        :type: list[object]
        """
        if sieves is None:
            raise ValueError("Invalid value for `sieves`, must not be `None`")  # noqa: E501

        self._sieves = sieves

    @property
    def steps(self):
        """Gets the steps of this AdviserResultResponseResultReportPipeline.  # noqa: E501

        Step pipeline unit types registered to the resolution process   # noqa: E501

        :return: The steps of this AdviserResultResponseResultReportPipeline.  # noqa: E501
        :rtype: list[object]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this AdviserResultResponseResultReportPipeline.

        Step pipeline unit types registered to the resolution process   # noqa: E501

        :param steps: The steps of this AdviserResultResponseResultReportPipeline.  # noqa: E501
        :type: list[object]
        """
        if steps is None:
            raise ValueError("Invalid value for `steps`, must not be `None`")  # noqa: E501

        self._steps = steps

    @property
    def strides(self):
        """Gets the strides of this AdviserResultResponseResultReportPipeline.  # noqa: E501

        Stride pipeline unit types registered to the resolution process   # noqa: E501

        :return: The strides of this AdviserResultResponseResultReportPipeline.  # noqa: E501
        :rtype: list[object]
        """
        return self._strides

    @strides.setter
    def strides(self, strides):
        """Sets the strides of this AdviserResultResponseResultReportPipeline.

        Stride pipeline unit types registered to the resolution process   # noqa: E501

        :param strides: The strides of this AdviserResultResponseResultReportPipeline.  # noqa: E501
        :type: list[object]
        """
        if strides is None:
            raise ValueError("Invalid value for `strides`, must not be `None`")  # noqa: E501

        self._strides = strides

    @property
    def wraps(self):
        """Gets the wraps of this AdviserResultResponseResultReportPipeline.  # noqa: E501

        Wrap pipeline unit types registered to the resolution process   # noqa: E501

        :return: The wraps of this AdviserResultResponseResultReportPipeline.  # noqa: E501
        :rtype: list[object]
        """
        return self._wraps

    @wraps.setter
    def wraps(self, wraps):
        """Sets the wraps of this AdviserResultResponseResultReportPipeline.

        Wrap pipeline unit types registered to the resolution process   # noqa: E501

        :param wraps: The wraps of this AdviserResultResponseResultReportPipeline.  # noqa: E501
        :type: list[object]
        """
        if wraps is None:
            raise ValueError("Invalid value for `wraps`, must not be `None`")  # noqa: E501

        self._wraps = wraps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdviserResultResponseResultReportPipeline, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdviserResultResponseResultReportPipeline):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
