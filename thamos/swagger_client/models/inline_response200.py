# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.6.0-dev

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "parameters": "InlineResponse200Parameters",
        "hardware_environments": "list[InlineResponse200HardwareEnvironments]",
    }

    attribute_map = {
        "parameters": "parameters",
        "hardware_environments": "hardware_environments",
    }

    def __init__(self, parameters=None, hardware_environments=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501
        self._parameters = None
        self._hardware_environments = None
        self.discriminator = None
        self.parameters = parameters
        self.hardware_environments = hardware_environments

    @property
    def parameters(self):
        """Gets the parameters of this InlineResponse200.  # noqa: E501


        :return: The parameters of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200Parameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this InlineResponse200.


        :param parameters: The parameters of this InlineResponse200.  # noqa: E501
        :type: InlineResponse200Parameters
        """
        if parameters is None:
            raise ValueError(
                "Invalid value for `parameters`, must not be `None`"
            )  # noqa: E501

        self._parameters = parameters

    @property
    def hardware_environments(self):
        """Gets the hardware_environments of this InlineResponse200.  # noqa: E501


        :return: The hardware_environments of this InlineResponse200.  # noqa: E501
        :rtype: list[InlineResponse200HardwareEnvironments]
        """
        return self._hardware_environments

    @hardware_environments.setter
    def hardware_environments(self, hardware_environments):
        """Sets the hardware_environments of this InlineResponse200.


        :param hardware_environments: The hardware_environments of this InlineResponse200.  # noqa: E501
        :type: list[InlineResponse200HardwareEnvironments]
        """
        if hardware_environments is None:
            raise ValueError(
                "Invalid value for `hardware_environments`, must not be `None`"
            )  # noqa: E501

        self._hardware_environments = hardware_environments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
