# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.7.0-dev

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProvenanceResultResponseResultParametersProject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'constraints': 'list[ProvenanceResultResponseResultParametersProjectConstraints]',
        'requirements': 'object',
        'requirements_locked': 'object',
        'runtime_environment': 'RuntimeEnvironment'
    }

    attribute_map = {
        'constraints': 'constraints',
        'requirements': 'requirements',
        'requirements_locked': 'requirements_locked',
        'runtime_environment': 'runtime_environment'
    }

    def __init__(self, constraints=None, requirements=None, requirements_locked=None, runtime_environment=None):  # noqa: E501
        """ProvenanceResultResponseResultParametersProject - a model defined in Swagger"""  # noqa: E501
        self._constraints = None
        self._requirements = None
        self._requirements_locked = None
        self._runtime_environment = None
        self.discriminator = None
        self.constraints = constraints
        self.requirements = requirements
        self.requirements_locked = requirements_locked
        self.runtime_environment = runtime_environment

    @property
    def constraints(self):
        """Gets the constraints of this ProvenanceResultResponseResultParametersProject.  # noqa: E501


        :return: The constraints of this ProvenanceResultResponseResultParametersProject.  # noqa: E501
        :rtype: list[ProvenanceResultResponseResultParametersProjectConstraints]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this ProvenanceResultResponseResultParametersProject.


        :param constraints: The constraints of this ProvenanceResultResponseResultParametersProject.  # noqa: E501
        :type: list[ProvenanceResultResponseResultParametersProjectConstraints]
        """
        if constraints is None:
            raise ValueError("Invalid value for `constraints`, must not be `None`")  # noqa: E501

        self._constraints = constraints

    @property
    def requirements(self):
        """Gets the requirements of this ProvenanceResultResponseResultParametersProject.  # noqa: E501

        Requirements stating direct dependencies of the project, the format is compatible with Pipenv   # noqa: E501

        :return: The requirements of this ProvenanceResultResponseResultParametersProject.  # noqa: E501
        :rtype: object
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this ProvenanceResultResponseResultParametersProject.

        Requirements stating direct dependencies of the project, the format is compatible with Pipenv   # noqa: E501

        :param requirements: The requirements of this ProvenanceResultResponseResultParametersProject.  # noqa: E501
        :type: object
        """
        if requirements is None:
            raise ValueError("Invalid value for `requirements`, must not be `None`")  # noqa: E501

        self._requirements = requirements

    @property
    def requirements_locked(self):
        """Gets the requirements_locked of this ProvenanceResultResponseResultParametersProject.  # noqa: E501

        A lock file stating all the dependencies pinned to a specific version togher with an explicit Python package index configuration   # noqa: E501

        :return: The requirements_locked of this ProvenanceResultResponseResultParametersProject.  # noqa: E501
        :rtype: object
        """
        return self._requirements_locked

    @requirements_locked.setter
    def requirements_locked(self, requirements_locked):
        """Sets the requirements_locked of this ProvenanceResultResponseResultParametersProject.

        A lock file stating all the dependencies pinned to a specific version togher with an explicit Python package index configuration   # noqa: E501

        :param requirements_locked: The requirements_locked of this ProvenanceResultResponseResultParametersProject.  # noqa: E501
        :type: object
        """
        if requirements_locked is None:
            raise ValueError("Invalid value for `requirements_locked`, must not be `None`")  # noqa: E501

        self._requirements_locked = requirements_locked

    @property
    def runtime_environment(self):
        """Gets the runtime_environment of this ProvenanceResultResponseResultParametersProject.  # noqa: E501


        :return: The runtime_environment of this ProvenanceResultResponseResultParametersProject.  # noqa: E501
        :rtype: RuntimeEnvironment
        """
        return self._runtime_environment

    @runtime_environment.setter
    def runtime_environment(self, runtime_environment):
        """Sets the runtime_environment of this ProvenanceResultResponseResultParametersProject.


        :param runtime_environment: The runtime_environment of this ProvenanceResultResponseResultParametersProject.  # noqa: E501
        :type: RuntimeEnvironment
        """
        if runtime_environment is None:
            raise ValueError("Invalid value for `runtime_environment`, must not be `None`")  # noqa: E501

        self._runtime_environment = runtime_environment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvenanceResultResponseResultParametersProject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvenanceResultResponseResultParametersProject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
